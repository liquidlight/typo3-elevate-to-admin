#!/usr/bin/env bash

#
# TYPO3 Extension Test Runner
# Simple, unified test running for all environments
#

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Default values
TEST_SUITE="functional"
VERBOSE=false

# Help function
show_help() {
	echo "TYPO3 Extension Test Runner"
	echo ""
	echo "Usage: ./run-tests [OPTIONS]"
	echo ""
	echo "Options:"
	echo "  -s, --suite <suite>    Test suite to run (unit|functional|all) [default: functional]"
	echo "  -v, --verbose          Show verbose output"
	echo "  -h, --help            Show this help"
	echo ""
	echo "Examples:"
	echo "  ./run-tests                    # Run functional tests"
	echo "  ./run-tests -s unit            # Run unit tests"
	echo "  ./run-tests -s all             # Run all tests"
	echo "  ./run-tests -v                 # Run with verbose output"
}

# Parse arguments
while [[ $# -gt 0 ]]; do
	case $1 in
		-s|--suite)
			TEST_SUITE="$2"
			shift 2
			;;
		-v|--verbose)
			VERBOSE=true
			shift
			;;
		-h|--help)
			show_help
			exit 0
			;;
		*)
			echo "Unknown option: $1"
			show_help
			exit 1
			;;
	esac
done

# Validate test suite
case $TEST_SUITE in
	unit|functional|all)
		;;
	*)
		echo -e "${RED}Error: Invalid test suite '$TEST_SUITE'. Must be 'unit', 'functional', or 'all'.${NC}"
		exit 1
		;;
esac

# Find PHPUnit
PHPUNIT_CMD=""
if [ -f ".Build/vendor/bin/phpunit" ]; then
	PHPUNIT_CMD=".Build/vendor/bin/phpunit"
elif [ -f "vendor/bin/phpunit" ]; then
	PHPUNIT_CMD="vendor/bin/phpunit"
else
	echo -e "${RED}Error: PHPUnit not found. Run 'composer install' first.${NC}"
	exit 1
fi

# Check if dependencies are installed
if [ ! -d ".Build/vendor" ] && [ ! -d "vendor" ]; then
	echo -e "${YELLOW}Installing dependencies...${NC}"
	composer install --no-dev --optimize-autoloader
fi

# Build PHPUnit command
PHPUNIT_ARGS="--no-coverage"
if [ "$VERBOSE" = true ]; then
	PHPUNIT_ARGS="$PHPUNIT_ARGS --verbose"
fi

# Function to run tests
run_test_suite() {
	local suite_name=$1
	local suite_arg=$2

	echo -e "${BLUE}Running $suite_name tests...${NC}"
	echo "Command: $PHPUNIT_CMD $suite_arg $PHPUNIT_ARGS"
	echo ""

	if $PHPUNIT_CMD $suite_arg $PHPUNIT_ARGS; then
		echo -e "${GREEN}âœ“ $suite_name tests passed${NC}"
		return 0
	else
		echo -e "${RED}âœ— $suite_name tests failed${NC}"
		return 1
	fi
}

# Run tests
echo -e "${BLUE}TYPO3 Extension Test Runner${NC}"
echo "============================"
echo ""

case $TEST_SUITE in
	unit)
		run_test_suite "Unit" "--testsuite=Unit\ tests"
		;;
	functional)
		run_test_suite "Functional" "--testsuite=Functional\ tests"
		;;
	all)
		echo -e "${BLUE}Running all test suites...${NC}"
		echo ""

		unit_result=0
		functional_result=0

		run_test_suite "Unit" "--testsuite=Unit\ tests" || unit_result=1
		echo ""
		run_test_suite "Functional" "--testsuite=Functional\ tests" || functional_result=1

		echo ""
		echo "============================"
		echo "Test Summary:"

		if [ $unit_result -eq 0 ]; then
			echo -e "${GREEN}âœ“ Unit tests: PASSED${NC}"
		else
			echo -e "${RED}âœ— Unit tests: FAILED${NC}"
		fi

		if [ $functional_result -eq 0 ]; then
			echo -e "${GREEN}âœ“ Functional tests: PASSED${NC}"
		else
			echo -e "${RED}âœ— Functional tests: FAILED${NC}"
		fi

		# Exit with error if any tests failed
		if [ $unit_result -ne 0 ] || [ $functional_result -ne 0 ]; then
			exit 1
		fi
		;;
esac

echo ""
echo -e "${GREEN}All tests completed successfully! ðŸŽ‰${NC}"
